import sys

if len(sys.argv) < 2:
    print("hex2inc - convert IBM Hex data file to Assembler Include file")
    print("Useage: hex2inc input-file [output-file]")
    quit()


# Using readlines()
filename = sys.argv[1]
if filename.find(".") < 0:
    filename += ".obj"

name = filename.split(".")[0]
outfile = name+".inc"

if len(sys.argv) > 2:
    outfile = sys.argv[2]

if outfile.find(".") < 0:
    outfile += ".inc"

print("Parsing {} -> {}".format(filename, outfile))

file1 = open(filename, 'r')
Lines = file1.readlines()
  
startAddress = -1
endAddress = -1

count = 0
# Format is :[HH: Byte count][HHHH: Address][HH: Record type]{HH...: Data}[HH: Checksum]
# Strips the newline character

output = []

output.append("; Autogenerated by hex2inc from {}\n;\n".format(filename))

for line in Lines:
    count += 1
    line = line.strip()
    if line.startswith(":") and len(line) > 10:
        checksum = 0
        for index in range(1, len(line)-2, 2):
            # print( "{} -> {}".format(index, line[index: index+2]) )
            byte = int( line[index: index+2], 16)
            checksum += byte

        checksum = (~(checksum & 0x0ff)+1) & 0x0FF
        expected = int( line[-2:], 16)
        if checksum != expected:
            raise Exception("Checksum error on line {} : {} - got {} ".format(count, line, checksum))

        byteCount = int( line[1:3], 16 )
        address = int( line[3:7], 16 )
        recordType = int( line[7:9], 16 )
        ended = False

        if recordType == 0x00:    #Data
            if startAddress < 0:
                startAddress = address
            elif address != endAddress:
                raise Exception( "Data is not continuous on line {}: Expecting address {}, got {}".format(count, endAddress, address))

            endAddress = address+byteCount

            assembler = "                     .DB ";

            for index in range(9, len(line)-2, 2):
                byte = int( line[index: index+2], 16)
                if index > 9:
                    assembler += ", "
                assembler += "0{:02X}h".format(byte)

            assembler += "\n";
            output.append(assembler)
        elif recordType == 0x01:  # EOF
            # Something
            print("Got end of file")
            if ended:
                raise Exception("More than one end of file on line {}".format(count))
            ended = True
        else:
            raise Exception( "Unhandled record type {} on line {}".format(recordType, count))

        # print("Line{}: {} = {} {}".format(count, checksum, expected, line))
    else:
        raise Exception( "Error - invalid line at {}: {}".format(count, line) )

if not ended:
    raise Exception("Missing end of file record")

print("Start address {:04x}, endAddress {:04x} - total bytes {}".format(startAddress, endAddress-1, endAddress-startAddress))

output.insert(1, "; Start address {:04X}, endAddress {:04X} - total bytes {}\n;\n".format(startAddress, endAddress-1, endAddress-startAddress))
output.insert(2, "                     .DW 0{:04x}h, 0{:04X}h ; Start, length \n\n".format(startAddress, endAddress-startAddress))
file1 = open(outfile, 'w')
file1.writelines(output)
file1.close()
